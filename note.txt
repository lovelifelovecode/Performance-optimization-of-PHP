PHP语言级性能优化：
1.apache下的ab压力测试工具的使用。在优化前和优化后，都可以用ab软件测试时间，看呦没有优化效果。模拟并发请求100次，总共请求10000次
命令模板： ab -c 100 -n 10000 待测试网站（建议完整路径）

2.能用php原生函数完成的事情，就用php提供的函数。php运行的原理是，先编译成C语言，再把C语言编译成二	进制的计算机语言。php提供的函数，已经编译成C语言，所以比我们自己写的函数运行要快。

3.PHP内置的函数之间性能也是有差异的，比如：isset()与array_key_exists()判断一个数组元素是否存在。

4.php提供的魔术方法，性能不佳。为了给php程序员省事，PHP语言做了很多封装事情。尽可能规避PHP魔法函数。一万次时间相差两倍以上,用time php *.php测试

5.php测试可以再终端运行time php index.php

6.尽量不要使用错误抑制符@ 它运行的机制是运行@前通知系统忽略报错，运行后通知系统恢复原来的机制。

7.合理使用内存，PHP有内存回收机制保底，但也要小心使用内存。利用unset()及时释放不使用的内存。

8.尽量少的使用正则表达式，正则表达式的回溯比较大，特别是匹配项越多或者匹配项越长的时候。尽量优化正则表达式。

9.尽量不要再循环中计算。比如：for($i=0;$i<count($arr);$i++) 应改为：for($i=0,$num=count($arr);$i<$num;$i++)

10.减少计算密集型业务，PHP语言特性不适合做大数据量运算。PHP适合的场景：衔接WebServer与后端服务，UI呈现。

11.使用数组的时候，健指务必要用引号，不然系统会当作常量处理，找不到对应常量的时候才当字符串来处理。增加了不必要的开销。




PHP周边问题的性能优化：
1.减少文件类操作。

2.优化网络请求
 2.1设置超时时间
	a.连接超时  不要超过200ms
	b.读超时  不要超过500ms
	c.写超时  不要超过800ms
 2.2将串行化请求改为并行化请求
    a.使用curl_multi_*()，但有个缺点，就是以请求最慢那个为时间标准。
    b.使用swoole扩展

3.压缩PHP接口输出，用Gzip即可。优点：Client端能更快的接收数据。缺点：额外的CPU开销。内容少于100k的时候效果不大，甚至还比原来要大。

4.缓存重复计算的内容。比如Memcached,redis



PHP性能分析工具：XHPorf，这个工具很好，可以检测出那个函数耗时最多，针对性的去优化。
PHP性能瓶颈：通过PHP扩展代替原PHP代码中高频逻辑。
